// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewFocLab.Model;

namespace FocLab.Migrations.FocLab
{
    [DbContext(typeof(FocLabDbContext))]
    [Migration("20210331091510_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NewFocLab.Model.Entities.Chemistry.ChemistryMethodFile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("MethodFiles");
                });

            modelBuilder.Entity("NewFocLab.Model.Entities.Chemistry.ChemistryReagent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Reagents");
                });

            modelBuilder.Entity("NewFocLab.Model.Entities.Chemistry.ChemistryTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminQuality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeadLineDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MethodFileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PerformedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PerformerQuality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerformerQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerformerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerformerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SubstanceCounterJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("MethodFileId");

                    b.HasIndex("PerformerUserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("NewFocLab.Model.Entities.Chemistry.ChemistryTaskDbFile", b =>
                {
                    b.Property<string>("ChemistryTaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ChemistryTaskId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("TaskDbFiles");
                });

            modelBuilder.Entity("NewFocLab.Model.Entities.Chemistry.ChemistryTaskExperiment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChemistryTaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PerformedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PerformerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PerformerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SubstanceCounterJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChemistryTaskId");

                    b.HasIndex("PerformerId");

                    b.ToTable("TaskExperiments");
                });

            modelBuilder.Entity("NewFocLab.Model.Entities.Chemistry.ChemistryTaskExperimentFile", b =>
                {
                    b.Property<string>("ChemistryTaskExperimentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ChemistryTaskExperimentId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("TaskExperimentFiles");
                });

            modelBuilder.Entity("NewFocLab.Model.Entities.Chemistry.ChemistryTaskReagent", b =>
                {
                    b.Property<string>("TaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReagentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ReturnedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TakenQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TaskId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("TaskReagents");
                });

            modelBuilder.Entity("NewFocLab.Model.External.FocLabDbFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("NewFocLab.Model.External.FocLabUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NewFocLab.Model.Entities.Chemistry.ChemistryMethodFile", b =>
                {
                    b.HasOne("NewFocLab.Model.External.FocLabDbFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewFocLab.Model.Entities.Chemistry.ChemistryTask", b =>
                {
                    b.HasOne("NewFocLab.Model.External.FocLabUser", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserId");

                    b.HasOne("NewFocLab.Model.Entities.Chemistry.ChemistryMethodFile", "ChemistryMethodFile")
                        .WithMany()
                        .HasForeignKey("MethodFileId");

                    b.HasOne("NewFocLab.Model.External.FocLabUser", "PerformerUser")
                        .WithMany()
                        .HasForeignKey("PerformerUserId");
                });

            modelBuilder.Entity("NewFocLab.Model.Entities.Chemistry.ChemistryTaskDbFile", b =>
                {
                    b.HasOne("NewFocLab.Model.Entities.Chemistry.ChemistryTask", "ChemistryTask")
                        .WithMany("Files")
                        .HasForeignKey("ChemistryTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewFocLab.Model.External.FocLabDbFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewFocLab.Model.Entities.Chemistry.ChemistryTaskExperiment", b =>
                {
                    b.HasOne("NewFocLab.Model.Entities.Chemistry.ChemistryTask", "ChemistryTask")
                        .WithMany("Experiments")
                        .HasForeignKey("ChemistryTaskId");

                    b.HasOne("NewFocLab.Model.External.FocLabUser", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId");
                });

            modelBuilder.Entity("NewFocLab.Model.Entities.Chemistry.ChemistryTaskExperimentFile", b =>
                {
                    b.HasOne("NewFocLab.Model.Entities.Chemistry.ChemistryTaskExperiment", "ChemistryTaskExperiment")
                        .WithMany("Files")
                        .HasForeignKey("ChemistryTaskExperimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewFocLab.Model.External.FocLabDbFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewFocLab.Model.Entities.Chemistry.ChemistryTaskReagent", b =>
                {
                    b.HasOne("NewFocLab.Model.Entities.Chemistry.ChemistryReagent", "Reagent")
                        .WithMany("Tasks")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewFocLab.Model.Entities.Chemistry.ChemistryTask", "Task")
                        .WithMany("Reagents")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
