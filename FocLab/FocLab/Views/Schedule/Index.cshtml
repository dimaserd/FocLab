@using Tms.Logic.Models.Tasker
@model CalendarMonthViewModel
@{
    var searchModel = (UserScheduleSearchModel)ViewData["searchModel"];

    var culture = new System.Globalization.CultureInfo("ru-RU");

    string DayOfWeekToString(DayOfWeek x) => culture.DateTimeFormat.DayNames[(int)x];

    const string baseLinkFormat = "/Schedule/Index?MonthShift={0}&UserIds={1}";

    var linkFormat = baseLinkFormat.Replace("{1}", "");

    var isAdmin = User.IsAdmin();
}

<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">

@await Html.RenderApplicationFilesAsync("Tasker")


<div class="container-fluid">
    <header>
        <div class="row">
            <div class="col-lg-12 col-md-12 d-flex justify-content-between">
                <div class="form-group m-form__group mr-2">
                    <select id="usersSelect" class="usersSelect" name="filter.UserIds" multiple></select>
                </div>

                <div id="createTaskBtn" class="form-group m-form__group">
                    
                </div>
            </div>
        </div>
        <hr />
        
        <h4 class="display-4 mb-4 text-center">
            <span class="btn btn-success float-left" onclick="ApplyFilter(false)">
                <i class="fas fa-angle-left"></i>
            </span>

            @Model.TodayDate.ToString("MMMM") @Model.TodayDate.Year

            <span class="btn btn-success float-right" onclick="ApplyFilter(true)">
                <i class="fas fa-angle-right"></i>
            </span>

        </h4>
        <div class="row d-none d-sm-flex p-1 bg-dark text-white">
            <h5 class="col-sm p-1 text-center">@DayOfWeekToString(DayOfWeek.Monday)</h5>
            <h5 class="col-sm p-1 text-center">@DayOfWeekToString(DayOfWeek.Tuesday)</h5>
            <h5 class="col-sm p-1 text-center">@DayOfWeekToString(DayOfWeek.Wednesday)</h5>
            <h5 class="col-sm p-1 text-center">@DayOfWeekToString(DayOfWeek.Thursday)</h5>
            <h5 class="col-sm p-1 text-center">@DayOfWeekToString(DayOfWeek.Friday)</h5>
            <h5 class="col-sm p-1 text-center">@DayOfWeekToString(DayOfWeek.Saturday)</h5>
            <h5 class="col-sm p-1 text-center">@DayOfWeekToString(DayOfWeek.Sunday)</h5>
        </div>
    </header>
    <div class="row border border-right-0 border-bottom-0">

        @foreach (var dateP in Model.DaysInPrevMonth)
        {

            var dayOfWeek = dateP.DayOfWeek;

            <div class="day col-sm p-2 border border-left-0 border-top-0 text-truncate d-none d-sm-inline-block bg-light text-muted">
                <h5 class="row align-items-center">
                    <span class="date col-1">@dateP.Day</span>
                    <small class="col d-sm-none text-center text-muted">@DayOfWeekToString(dateP.DayOfWeek)</small>
                    <span class="col-1"></span>
                </h5>
                <p class="d-sm-none">Нет задач</p>
            </div>

            if (dayOfWeek == DayOfWeek.Sunday)
            {
                <div class="w-100"></div>
            }
        }

        @if (Model.TodayDate.DayOfWeek == DayOfWeek.Monday && Model.TodayDate.Day == 1)
        {
            <div class="w-100"></div>
        }

        @foreach (var dateP in Model.DaysInThisMonth)
        {

            var dayOfWeek = dateP.DayOfWeek;



            <div class="day col-sm p-2 border border-left-0 border-top-0 text-truncate" data-date="@dateP.ToString("dd.MM.yyyy")" data-full-date="@dateP">
                <h5 class="row align-items-center">
                    <span class="date col-1">@dateP.Day</span>
                    <small class="col d-sm-none text-center text-muted">@DayOfWeekToString(dateP.DayOfWeek)</small>
                    <span class="col-1"></span>
                </h5>

                <p class="no-tasks-text d-sm-none">Нет задач</p>
            </div>

            if (dayOfWeek == DayOfWeek.Sunday)
            {
                <div class="w-100"></div>
            }
        }


        @foreach (var dateP in Model.DaysInNextMonth)
        {
            <div class="day col-sm p-2 border border-left-0 border-top-0 text-truncate d-none d-sm-inline-block bg-light text-muted">
                <h5 class="row align-items-center">
                    <span class="date col-1">@dateP.Day</span>
                    <small class="col d-sm-none text-center text-muted">@((DayOfWeekToString(dateP.DayOfWeek)))</small>
                    <span class="col-1"></span>
                </h5>

            </div>
        }


    </div>
</div>

<div style="height:25px">

</div>

<div class="row">
    <div class="col-6">

    </div>

    <div class="col-6">
        <div class="form-group m-form__group">
            <button onclick="location.href='/'" class="btn btn-success float-right">Назад</button>
        </div>
    </div>



</div>

@await Html.PartialAsync("~/Views/Schedule/Partials/Modals.cshtml")


@section Scripts{

    <script>
        function formatStateSelection(state) {

            if (!state.id) {
                return state.text;
            }

            var img = "";

            if (state.avatarId) {
                const baseUrl = `/FileCopies/Images/Icon/${state.avatarId}.jpg`;
                img = `<img src="${baseUrl}" class="img-max-50" />`;
            }


            const $state = $(
                `<span>${img} ${state.text}<span>&nbsp;</span></span>`
            );
            return $state;
        };

        function formatStateResult(state) {
            if (!state.id) {
                return state.text;
            }

            var img = "";

            if (state.avatarId) {
                const baseUrl = `/FileCopies/Images/Icon/${state.avatarId}.jpg`;
                img = `<img src="${baseUrl}" class="img-max-50" />`;
            }


            const $state = $(
                `<span>${img} ${state.text}<span>&nbsp;</span></span>`
            );
            return $state;
        };
    </script>

    <script>

        var filter = @Html.GetJson(searchModel);

        var scheduleWorker = new ScheduleWorker(filter);
    </script>

    <script>
        function ShowUserSchedule() {
            var data = {
                UserIds: []
            };

            data = CollectDataByPrefix(data, "filter.");

            location.href = `/Schedule/Index?${Requester.GetParams(data)}`;
    }


    function ShowDayTaskModal(taskId) {

        let task = dayTasksWorker.GetTaskById(taskId);


        dayTasksWorker.SetCurrentTaskId(taskId);

        TaskModalWorker.InitTask(task, accountWorker.User.Id);

        FillDataByPrefix(task, "task.");

        var elems = document.getElementsByName("TaskTitle");
        if (!elems.length === 1) {
            editableComponents.InitEditable(document.getElementById("TaskTitle"), () => updateDayTask());
        }

        elem = document.getElementsByName("TaskText");
        if (!elems.length === 1) {
            editableComponents.InitEditable(document.getElementById("TaskText"), () => updateDayTask(), true);
        }

        Utils.SetDatePicker("input[name='task.TaskDate']");

        $("input[name='task.TaskDate']").on('change', function () {
            updateDayTask();
        });

        ModalWorker.ShowModal("dayTaskModal");
    }

    ShowCreateTaskModal = () => {
        var data = {
            TaskDate: "",
            TaskText: "",
            TaskTitle: ""
        };

        FillDataByPrefix(data, "create.");

        Utils.SetDatePicker("input[name='create.TaskDate']", '0');

        ModalWorker.ShowModal("createDayTaskModal");
    }

    updateComment = (commentId) => {
        var data = {
            Comment: ""
        }
        data = CollectDataByPrefix(data, "edit.");
        data.DayTaskCommentId = commentId;

        Requester.SendAjaxPost("/Api/DayTask/Comments/Update", data, resp => {
            if (resp.IsSucceeded) {
                TaskModalWorker.DrawComments("Comments", accountWorker.User.Id, resp.ResponseObject);
                dayTasksWorker.GetTasks();
            }
        }
        );
    }

    addComment = function() {
            var data = {
                DayTaskId: "",
                Comment: ""
            }
            data = CollectData(data);
        Requester.SendAjaxPost("/Api/DayTask/Comments/Add", data, resp => {
            if (resp.IsSucceeded) {
                TaskModalWorker.DrawComments("Comments", accountWorker.User.Id, resp.ResponseObject);
                console.log(resp.ResponseObject);
                dayTasksWorker.GetTasks();
            }
        }
        );
    }

    updateDayTask = () => {

        var data = {
            //EstimationSeconds: 0,
            TaskText: "",
            TaskTitle: "",
            AssigneeUserId: ""
        };
        data = CollectDataByPrefix(data, "task.");
        data.Id = document.getElementsByName('DayTaskId')[0].value;
        data.TaskDate = Utils.GetDateFromDatePicker("TaskDate");

        Requester.SendAjaxPost("/Api/DayTask/Update", data, resp => (resp.IsSucceeded
            ? dayTasksWorker.GetTasks()
            : console.log(resp))
        );

    }

    createDayTask = () => {
            var data = {
                TaskText: "",
                TaskTitle: "",
                AssigneeUserId: ""
            }
            data = CollectDataByPrefix(data, "create.");
            data.TaskDate = Utils.GetDateFromDatePicker("TaskDate1");

            Requester.SendAjaxPost("/Api/DayTask/Create", data, resp => (
                resp.IsSucceeded
                    ? this.hideCreateModal()
                    : ToastrWorker.HandleBaseApiResponse(resp)
            ));

    }

    hideCreateModal = () => {
            $("#createDayTaskModal").modal("hide");
            dayTasksWorker.GetTasks();
    }

    redirectToProfile = (profileId) => {
        window.open(`${window.location.origin}/Client/Details/${profileId}`, '_blank');
    }
    </script>

    @await Html.PartialAsync("~/Views/Extensions/SummerNoteTranslation.cshtml")
}



<script>
    var searchModel = @Html.GetJson(searchModel);

    var props = {
        Tasks: null,
        IsAdmin: @isAdmin.ToString().ToLower(),
        User: null,
        SearchModel: searchModel,
        OpenTaskId: searchModel.DayTaskId,
        MyUserId: "@User.Identity.GetUserId()"
    };


    var dayTasksWorker = new DayTasksWorker(props);

    props = { AssigneeUserId: null };

    var adminDayTaskCreator = new AdminDayTaskCreator(props);

    var dayTaskEditor = new DayTaskEditor();

    function GetQueryParams(isNextMonth) {
        var data = {
            UserIds: []
        };

        data = CollectDataByPrefix(data, "filter.");
        data.MonthShift = isNextMonth ? filter.MonthShift + 1 : filter.MonthShift - 1;

        return Requester.GetParams(data);
    }

    function ApplyFilter(isNextMonth) {

        location.href = `/Schedule/Index?${GetQueryParams(isNextMonth)}`;
    }

    document.addEventListener("DOMContentLoaded", function () {

        dayTasksWorker.GetTasks();

        $("#usersSelect").select2().on("change", () => { ShowUserSchedule(); });
        $("#usersSelect1").select2().on("change", () => { updateDayTask(); });
    });

    var model = @Html.GetJson(Model);
</script>
