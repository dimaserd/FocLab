@using FocLab.Logic.Models.Users
@model GetListResult<FocLab.Logic.EntityDtos.Users.Default.ApplicationUserDto>
@{
    ViewBag.Title = "Список пользователей";

    var searchModel = ViewData["searchModel"] as UserSearch;

    var q = searchModel.Q;

    Layout = ChemistrySettings.LayoutPath;

    const string linkFormat = "/Admin/Users/Index?Count={0}&OffSet={1}";

    var shownOnPage = Model.TotalCount < Model.List.Count ? Model.TotalCount : Model.List.Count;

    const string searchUsersPrefix = "SearchUsers";

    
}

<style>
    b, strong {
        font-size: initial;
        font-weight: bold;
    }



    .margin5px {
        margin: 5px 5px 5px 5px;
    }

    .selectWidth {
        width: 140px !important
    }
</style>


<div class="row mb-3">
    <div class="col-md-12">
        <a href="/Admin/Users/Create" class="btn btn-success margin5px">
            <i class="fa fa-plus-circle"></i>
            Создать нового пользователя
        </a>
    </div>
</div>

<div class="form-group m-form__group m--margin-top-10">
    <div class="alert m-alert m-alert--default" role="alert">
        <span class="h5">
            Всего пользователей <span class="m-badge m-badge--success">@Model.TotalCount</span> <span class="pull-right">Показано на странице <span class="m-badge m-badge--success">@shownOnPage</span> </span>
        </span>
        
    </div>
</div>

@await Html.RenderPaginationAsync(Model, linkFormat)

<div class="table-responsive">
    <table class="table table-bordered table-hover">
        <thead>
            <tr>

                <th scope="col">
                    <strong>
                        Имя
                    </strong>
                </th>
                <th scope="col">
                    <strong>
                        Email
                    </strong>

                </th>

                <th scope="col">
                    <strong>
                        Дата регистрации
                    </strong>

                </th>

                <th scope="col">
                    <strong>
                        Действия
                    </strong>

                </th>
            </tr>
        </thead>

        <tbody id="tableBody">
            @await Html.PartialAsync("~/Areas/Admin/Views/Users/Partials/UsersList.cshtml", model: Model)
        </tbody>
    </table>
</div>
@await Html.RenderPaginationAsync(Model, linkFormat)


@section Scripts{

    <script>

        var model = @Html.GetJson(Model.List);
        const filterPrefix = "Filter.";

        var searchModel = @Html.GetJson(searchModel);
        FormDataHelper.FillDataByPrefix(searchModel, filterPrefix);


        var regDate = '';
        if (searchModel['RegistrationDate'] != null) {
            if (searchModel['RegistrationDate'].Min != null) {
                regDate = searchModel['RegistrationDate'].Min.split('T')[0].split("-").reverse().join("/");
                document.getElementById('RegistrationDate').value = regDate;
            }
            if (searchModel['RegistrationDate'].Max != null)
                document.getElementById('RegistrationDate').value = regDate + " - " + searchModel['RegistrationDate'].Max.split('T')[0].split("-").reverse().join("/");
        }
        function LoginAsUser(id) {
            Requester.SendPostRequestWithAnimation("/Api/Account/Login/AsUser", { Id: id }, x => {
                if (x.IsSucceeded) {
                    setTimeout(function () { location.reload() }, 1000);
                }
            });
        }

        function SearchUser() {
            var q = document.getElementsByName("Filter.q")[0].value;

            location.href = `/Admin/Users?q=${q}`;
        }

        function ApplyFilter() {
            var data = {
                Deactivated: null,
                Sex: null,
                q: null
            };

            data = FormDataHelper.CollectDataByPrefix(data, filterPrefix);
            var dateRange = Utils.GetDateFromDateRangePicker('RegistrationDate');
            if (dateRange !== {})
                data.RegistrationDate = dateRange;

            if (data.Sex === "")
                delete data.Sex;

            if (data.RegistrationDate === "")
                delete data.RegistrationDate;
            location.href = `/Admin/Users/Index?${Requester.GetParams(data)}`;
        }
    </script>

    <script>
        $(".anotherActions").fadeOut();

        $(function () {
            Utils.SetDateRangePicker("input[name='Filter.RegistrationDate']");
        });
    </script>

    <script>
        function RemoveUser(userId) {
            Requester.SendPostRequestWithAnimation("/Api/User/Remove", { Id: userId }, x => {
                if (x.IsSucceeded) {
                    setTimeout(function () { location.reload() }, 1000);
                }
            });
        }

        function ActivateOrDeactivateUser(userId, flag) {
            Requester.SendPostRequestWithAnimation("/Api/User/ActivateOrDeActivateUser", { Id: userId, DeActivated: flag }, x => {
                if (x.IsSucceeded) {
                    setTimeout(function () { location.reload() }, 1000);
                }
            });
        }


        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });

    </script>
}