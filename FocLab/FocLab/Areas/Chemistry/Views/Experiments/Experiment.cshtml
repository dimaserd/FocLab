@using FocLab.Logic
@using FocLab.Logic.Extensions
@using FocLab.Model.Enumerations
@using FocLab.ViewModels
@model FocLab.Logic.Models.Experiments.ChemistryTaskExperimentModel
@{

    Layout = ChemistrySettings.LayoutPath;
    ViewBag.Title = "Эксперимент";

    const string viewsChemistry = "~/Areas/Chemistry/Views";

    var isNotAdmin = !User.HasRight(UserRight.Admin) && !User.HasRight(UserRight.SuperAdmin);

    var userId = User.Identity.GetUserId();

    var json = Model.SubstanceCounterJson ?? "";

    var title = string.IsNullOrEmpty(Model.Title) ? "[Без названия]" : Model.Title;

    int ToInt(ChemistryTaskDbFileType @enum)
    {
        return (int)@enum;
    }
}


<div>

    <div class="form-group m-form__group m--margin-top-10">
        <div class="alert m-alert m-alert--default" role="alert">
            <h5>
                Эксперимент к задаче <strong><a href="/Chemistry/Tasks/Task/@Model.Task.Id">@Model.Task.Title</a></strong>
            </h5>
        </div>
    </div>

    <div class="form-group m-form__group">
        <label for="@nameof(Model.Title)">
            <strong>
                @Model.Title
            </strong>
        </label>
        @Html.TextBoxFor(x => x.Title, new { @class = "form-control" })
    </div>


</div>



<div style="height:20px">

</div>

@await Html.PartialAsync("~/Areas/Chemistry/Views/Tasks/Partials/TaskFiles.cshtml", RenderTaskFilesViewModel.Create(Model, !isNotAdmin))

<div style="height:20px">

</div>

<div class="table-responsive">
    <table class="table table-bordered table-striped">
        <tbody>

            <tr>
                <th colspan="2" class="text-center">
                    <strong>Изображение реакции</strong>
                </th>
            </tr>

            @if (Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.ReactionSchemaImage))
            {
                <tr>
                    <th colspan="2">
                        <img class="img-responsive img-fluid" src="/Files/GetDbFileById?id=@Model.Files.FirstOrDefault(x => x.Type == ChemistryTaskDbFileType.ReactionSchemaImage).FileId&type=Medium" />
                    </th>
                </tr>

            }
            @{
                string btnText = Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.ReactionSchemaImage) ? "Перезагрузить файл реакции" : "Загрузить файл реакции";

                var specType = ChemistryTaskDbFileType.ReactionSchemaImage;
            }
            <tr>
                <th>
                    @if (Model.Performer.Id == userId)
                    {
                        <input type="file" id="@ToInt(specType)" accept="image/*" />
                    }
                </th>

                <th>
                    <button class="btn btn-success" onclick="LoadOrReloadFileForExperiment('@ToInt(specType)')">
                        @btnText
                    </button>

                    @if (Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.ReactionSchemaImage))
                    {
                        <a class="btn btn-primary" href="/Files/GetDbFileById/@Model.Files.FirstOrDefault(x => x.Type == specType).FileId">
                            Скачать изображение реакции
                        </a>
                    }

                </th>
            </tr>

        </tbody>

    </table>
</div>
@*Если там налл то он почему то берет верхний элемент модели*@
@await Html.PartialAsync($"{viewsChemistry}/Tasks/Table.cshtml", model: Model.SubstanceCounter)



<div style="height:20px">

</div>


<div>
    <div class="form-group m-form__group row">
        <label class="col-xl-12 col-lg-12 col-form-label">
            <strong>
                Текст выполнения
            </strong>
        </label>
        <div class="col-xl-12 col-lg-12">
            @Html.TextAreaFor(x => x.PerformerText, htmlAttributes: new { @class = "form-control m-input", style = "height:150px", rows = "3" })
        </div>
    </div>
</div>


<div class="m-portlet__foot m-portlet__foot--fit">
    <div class="m-form__actions m-form__actions">
        <div class="row">
            <div class="col-lg-9">
                @if (userId == Model.Performer.Id)
                {

                    <button type="reset" class="btn btn-brand form-action-btn">Обновить</button>
                }
                <button type="reset" onclick="location.href='/Chemistry/Experiments/Index'" class="btn btn-secondary">Отмена</button>
            </div>
        </div>
    </div>
</div>


@section Scripts{


    <script src="~/js/Substance.min.js"></script>
    <script src="~/js/Experiments.min.js"></script>

    <script>

        var substanceObject = @Html.GetJson(Model.SubstanceCounter);

        SubstanceStaticHandlers.substance = new SubstanceCounter(substanceObject);

        ExperimentPageHandlers.ExperimentId = "@Model.Id";

        function UpdateFileByType(fileType) {

            ExperimentPageHandlers.UpdateFileByType(fileType);
        }


    </script>

    <!--Скрипты связанные с редактированием названия-->

    <script>
        var props = {
            Id: "@Model.Id"
        };

        var experimentWorker = new ExperimentWorker(props);
    </script>

    <script>
        function UpdateTitleClickHandler() {

            let data = {
                Title: document.getElementById("experiment.Title").value
            };

            experimentWorker.UpdateTitle(data);
        }
    </script>
}