@using FocLab.Logic
@using FocLab.Logic.Extensions
@using FocLab.Logic.Models
@using FocLab.Model.Enumerations
@using Microsoft.AspNetCore.Html
@using Croco.Core.Utils
@model FocLab.Logic.Models.Experiments.ChemistryTaskExperimentModel
@{

    Layout = ChemistrySettings.LayoutPath;
    ViewBag.Title = "Эксперимент";

    const string viewsChemistry = "~/Areas/Chemistry/Views";

    var isNotAdmin = !User.HasRight(UserRight.Admin) && !User.HasRight(UserRight.SuperAdmin);

    var userId = User.Identity.GetUserId();

    Tuple<string, string, int, int, bool>[] files = {


new Tuple<string, string, int, int, bool>("File1", "Файл1", 1, Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.File1) ? Model.Files.FirstOrDefault(x => x.Type == ChemistryTaskDbFileType.File1).FileId : 0,  Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.File1)),

new Tuple<string, string, int, int, bool>("File2", "Файл2", 2, Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.File2) ? Model.Files.FirstOrDefault(x => x.Type == ChemistryTaskDbFileType.File2).FileId : 0,  Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.File2)),

new Tuple<string, string, int, int, bool>("File3", "Файл3", 3, Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.File3) ? Model.Files.FirstOrDefault(x => x.Type == ChemistryTaskDbFileType.File3).FileId : 0,  Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.File3)),

new Tuple<string, string, int, int, bool>("File4", "Файл4", 4, Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.File4) ? Model.Files.FirstOrDefault(x => x.Type == ChemistryTaskDbFileType.File4).FileId : 0,  Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.File4)),


    };

    var json = Model.SubstanceCounterJson ?? "";

    var counter = Newtonsoft.Json.JsonConvert.DeserializeObject<Chemistry_SubstanceCounter>(json);

    counter = counter?.Etalon == null || counter.Substances == null ? Chemistry_SubstanceCounter.GetDefaultCounter() : counter;

    var title = string.IsNullOrEmpty(Model.Title) ? "[Без названия]" : Model.Title;
}


<div style="height:20px">

</div>


<h2>
    Эксперимент к задаче <strong><a href="/Chemistry/Tasks/Task/@Model.Task.Id">@Model.Task.Title</a></strong>
</h2>

<div class="row">
    <div class="col-md-12">
        <div class="input-group">
            <input type="text" class="form-control" value="@title" id="experiment.Title" placeholder="Название эксперимента">
            <div class="input-group-addon" onclick="UpdateTitleClickHandler()" data-toggle="tooltip" data-placement="top" title="Сохранить новое название эксперимента">
                    <i class="fa fa-floppy-o">

                    </i>
            </div>
        </div>

        
    </div>
</div>

<div style="height:20px">

</div>

<div class="table-responsive">
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    <strong>Статус файла</strong>
                    
                </th>
                @if (Model.Performer.Id == userId)
                {
                    <th>
                        <strong>Загрузка файла</strong>
                        
                    </th>
                }
                <th>
                    <strong>Действия</strong>
                    
                </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var file in files)
            {
                <tr>
                    <td>
                        @if (!file.Item5)
                        {
                            <strong>
                                <span class="text-danger">@file.Item2 не загружен</span>
                            </strong>
                        }
                        else
                        {
                            <strong>
                                <span class="text-success">@file.Item2 уже загружен</span>
                            </strong>
                        }
                    </td>

                    @if (Model.Performer.Id == userId)
                    {


                        <td>
                            <input id="@file.Item1" type="file" name="@file.Item2" />
                        </td>
                    }

                    <td>
                        <div class="row">

                            <div class="col-md-12">
                                @if (!file.Item5 && Model.Performer.Id == userId)
                                {

                                    <button class="btn btn-success btn-block" onclick="LoadOrReloadFileForExperiment('@file.Item3')">
                                        Загрузить файл
                                    </button>

                                }
                                else if (Model.Performer.Id == userId)
                                {
                                    <button class="btn btn-success btn-block" style="" onclick="LoadOrReloadFileForExperiment('@file.Item3')">
                                        Обновить файл
                                    </button>
                                }



                                @if (file.Item5)
                                {
                                    <a class="btn btn-primary btn-block" style="margin-top:10px" href="/Files/GetDbFileById/@file.Item4">
                                        Скачать файл
                                    </a>
                                }
                            </div>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div style="height:20px">

</div>

<div class="table-responsive">
    <table class="table table-bordered table-striped">
        <tbody>

            <tr>
                <th colspan="2" class="text-center">
                    <strong>Изображение реакции</strong>
                </th>
            </tr>

            @if (Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.ReactionSchemaImage))
            {
                <tr>
                    <th colspan="2">
                        <img class="img-responsive img-fluid" src="/Files/GetDbFileById?id=@Model.Files.FirstOrDefault(x => x.Type == ChemistryTaskDbFileType.ReactionSchemaImage).FileId&type=Medium" />
                    </th>
                </tr>

            }
            @{
                string btnText = Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.ReactionSchemaImage) ? "Перезагрузить файл реакции" : "Загрузить файл реакции";
            }
            <tr>
                <th>
                    @if (Model.Performer.Id == userId)
                    {
                        <input type="file" id="File0" accept="image/*" />
                    }
                </th>

                <th>
                    <button class="btn btn-success" onclick="LoadOrReloadFileForExperiment('0')">
                        @btnText
                    </button>

                    @if (Model.Files.Any(x => x.Type == ChemistryTaskDbFileType.ReactionSchemaImage))
                    {
                        <a class="btn btn-primary" href="/Files/GetDbFileById/@Model.Files.FirstOrDefault(x => x.Type == ChemistryTaskDbFileType.ReactionSchemaImage).FileId">
                            Скачать изображение реакции
                        </a>
                    }

                </th>
            </tr>

        </tbody>

    </table>
</div>
@*Если там налл то он почему то берет верхний элемент модели*@
@await Html.PartialAsync($"{viewsChemistry}/Tasks/Table.cshtml", model: counter)



<div style="height:20px">

</div>

<div class="table-responsive">
    <table class="table table-hover">
        <tr>
            <th colspan="2" class="">
                <strong>
                    Текст выполнения
                </strong>
            </th>
        </tr>

        <tr>
            <td colspan="2">
                @Html.TextArea("PerformerText", value: Model.PerformerText, htmlAttributes: new { @class = "form-control", style = "height:150px" })
            </td>
        </tr>

        @if (isNotAdmin && userId == Model.Performer.Id || User.HasRight(UserRight.Root))
        {
            <tr>
                <td colspan="2">
                    <div class="btn btn-success btn-block" onclick="UpdateExperiment()">
                        <strong>
                            Обновить данные эксперимента
                        </strong>
                    </div>
                </td>
            </tr>
        }
    </table>
</div>

@section Scripts{


    <script src="~/js/Substance.min.js"></script>
    <script>

        var substanceObject = @Html.GetJson(Model.SubstanceCounter);

        SubstanceStaticHandlers.substance = new SubstanceCounter(substanceObject);


        function UpdateExperiment() {

            var experimentJSON = @(new HtmlString(Tool.JsonConverter.Serialize(Model)));

            experimentJSON["PerformerText"] = document.getElementsByName("PerformerText")[0].value;

            experimentJSON["SubstanceCounterJSON"] = JSON.stringify(substance.getJSON());

            console.log("UpdateExperiment", experimentJSON);



            $.ajax({
                url: '/Chemistry/Chemistry/UpdateExperiment',
                type: 'POST',
                data: experimentJSON,
                async: true,
                dataType: 'json',
                success: function (response) {
                    console.log(response);

                    alert(response.Message);

                    location.reload();
                }
            });
        }



        function LoadOrReloadFileForExperiment(fileType) {

            //проверка на то загружается ли файл
            if (filesLoader.IsFileLoading) {

                alert("Файл уже загружается");
                return;
            }

            //ставлю флаг о том что файл загнружается
            filesLoader.IsFileLoading = true;

            console.log(fileType);

            var file_data = $('#File' + fileType).prop('files');

            var form_data = new FormData();

            if (file_data.length == 0) {
                alert("Файл не выбран");
                filesLoader.IsFileLoading = false;
                return;
            }

            for (var i = 0; i < file_data.length; i++) {
                form_data.append('File', file_data[i]);
            }


            form_data.append("ExperimentId", '@Model.Id');
            form_data.append("ExperimentFile.FileType", fileType);
            form_data.append("ExperimentFile.Description", "")


            $.ajax({
                url: '/Chemistry/Chemistry/LoadOrReloadFileForExperiment',
                type: 'POST',
                data: form_data,
                async: true,
                cache: false,
                dataType: 'json',
                contentType: false,
                processData: false,
                success: function (response) {

                    //убираю флаг загружаемости файла
                    filesLoader.IsFileLoading = false;
                    console.log(response);

                    alert(response.Message);

                    location.reload();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("Произошла ошибка! Обратитесь к разработчикам приложения.")
                    filesLoader.IsFileLoading = false;
                }
            });

        }


    </script>

    <!--Скрипты связанные с редактированием названия-->

    <script>
        class ExperimentWorker {
            constructor(props) {
                this.Id = props["Id"];

                this.IsAjaxLoading = false;
                this.setHandlers();
            }

            setHandlers() {
                this.UpdateTitle = function (data) {

                    data.Id = this.Id;

                    console.log("UpdateTitle", data);

                    if (this.IsAjaxLoading) {
                        return;
                    }

                    this.IsAjaxLoading = true;

                    $.ajax({
                        url: '/Api/Chemistry/Experiments/UpdateTitle',
                        type: 'POST',
                        data: data,
                        async: true,
                        cache: false,
                        dataType: 'json',
                        success: function (response) {

                            //убираю флаг загружаемости файла
                            this.IsAjaxLoading = false;
                            console.log(response);

                            alert(response.Message);

                            location.reload();
                        },
                        error: function () {
                            alert("Произошла ошибка! Обратитесь к разработчикам приложения.")
                            this.IsAjaxLoading = false;
                        }
                    });
                }.bind(this)
            }
        }
    </script>

    <script>
        var props = {
            Id: "@Model.Id"
        };

        var experimentWorker = new ExperimentWorker(props);
    </script>

    <script>
        function UpdateTitleClickHandler() {

            let data = {
                Title: document.getElementById("experiment.Title").value
            };

            experimentWorker.UpdateTitle(data);
        }
    </script>
}