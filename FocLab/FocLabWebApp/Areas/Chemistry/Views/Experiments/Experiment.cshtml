@using FocLab.App.Logic
@using FocLab.App.Logic.Extensions
@using FocLab.Model.Enumerations
@using FocLab.ViewModels
@model FocLab.Logic.Models.Experiments.ChemistryTaskExperimentModel
@{

    Layout = ChemistrySettings.LayoutPath;
    ViewBag.Title = "Эксперимент";

    const string viewsChemistry = "~/Areas/Chemistry/Views";

    var isNotAdmin = !User.IsInRole("Admin");

    var userId = User.Identity.GetUserId();

    var json = Model.SubstanceCounterJson ?? "";

    var title = string.IsNullOrEmpty(Model.Title) ? "[Без названия]" : Model.Title;
}


<div>

    <div class="row">
        <div class="col-12">
            <a href="/Chemistry/Experiments/Index" class="btn btn-primary" style="margin-top:5px">
                <i class="fa fa-list"></i>
                Список экспериментов
            </a>

            <a href="/Chemistry/Experiments/Print/@Model.Id" class="btn btn-success" style="margin-top:5px">
                <i class="fa fa-print" aria-hidden="true"></i>
                Печать документа
            </a>
        </div>
    </div>

    <div style="height:10px">

    </div>


    <div class="form-group m-form__group m--margin-top-10">
        <div class="alert m-alert m-alert--default" role="alert">
            <h5>
                Эксперимент к задаче <strong><a href="/Chemistry/Tasks/Task/@Model.Task.Id">@Model.Task.Title</a></strong>
            </h5>
        </div>
    </div>

    <div class="form-group m-form__group">
        <label for="@nameof(Model.Title)">
            <strong>
                Название
            </strong>
        </label>
        @Html.TextBox($"Experiment.{nameof(Model.Title)}", title, new { @class = "form-control" })
    </div>
</div>



<div style="height:20px">

</div>

@await Html.PartialAsync("~/Areas/Chemistry/Views/Tasks/Partials/ReactionMainImage.cshtml", RenderReactionMainSchemaImageViewModel.Create(Model, !isNotAdmin, User.GetUserId()))

@await Html.PartialAsync("~/Areas/Chemistry/Views/Tasks/Partials/TaskFiles.cshtml", RenderTaskFilesViewModel.Create(Model, !isNotAdmin, User.GetUserId()))

<div style="height:20px">

</div>


@await Html.PartialAsync($"{viewsChemistry}/Tasks/Table.cshtml", model: Model.SubstanceCounter)


<div style="height:20px">

</div>


<div>
    <div class="form-group m-form__group row">
        <label class="col-xl-12 col-lg-12 col-form-label">
            <strong>
                Текст выполнения
            </strong>
        </label>
        <div class="col-xl-12 col-lg-12">
            @Html.TextArea($"Experiment.{nameof(Model.PerformerText)}", Model.PerformerText, htmlAttributes: new { @class = "form-control m-input", style = "height:150px", rows = "3" })
        </div>
    </div>
</div>


<div class="m-portlet__foot m-portlet__foot--fit">
    <div class="m-form__actions m-form__actions">
        <div class="row">
            <div class="col-lg-9">
                @if (userId == Model.Performer.Id)
                {
                    <button type="reset" id="exp-update-btn" class="btn btn-brand form-action-btn exp-update-btn">Обновить</button>
                }
                <button type="reset" onclick="location.href='/Chemistry/Experiments/Index'" class="btn btn-secondary">Отмена</button>
            </div>
        </div>
    </div>
</div>


@section Scripts{


    <script src="~/js/Substance.min.js"></script>
    <script src="~/js/Experiments.min.js"></script>

    <script>

        var substanceObject = @Html.GetJson(Model.SubstanceCounter);

        SubstanceStaticHandlers.substance = new SubstanceCounter(substanceObject);

        ExperimentPageHandlers.ExperimentId = "@Model.Id";

        function UpdateFileByType(fileType) {

            ExperimentPageHandlers.UpdateFileByType(fileType);
        }
    </script>
}